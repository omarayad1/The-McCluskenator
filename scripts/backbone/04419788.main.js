this.JST=this.JST||{},this.JST["app/scripts/templates/circuit.ejs"]=function(obj){obj||(obj={});{var __p="";_.escape}with(obj)__p+="<div id='paper'></div>\n<script>\n\nvar arr2 = Mccluskyfrontend.PrimeDominate.toJSON();\nif (arr2[0].term == '1')\n{\n    $('#paper').html(\"<h1 style = 'text-align:center;color:#FFF'> No Circuit Needed, Always 1</h1>\")\n}\nelse\n{\n\nvar graph = new joint.dia.Graph;\n\nvar paper = new joint.dia.Paper({\n\n    el: $('#paper'), model: graph,\n    width: 1000, height: 600, gridSize: 5,\n    snapLinks: true,\n    defaultLink: new joint.shapes.logic.Wire,\n\n    validateConnection: function(vs, ms, vt, mt, e, vl) {\n\n        if (e === 'target') {\n\n            // target requires an input port to connect\n            if (!mt || !mt.getAttribute('class') || mt.getAttribute('class').indexOf('input') < 0) return false;\n\n            // check whether the port is being already used\n            var portUsed = _.find(this.model.getLinks(), function(link) {\n\n                return (link.id !== vl.model.id &&\n                        link.get('target').id === vt.model.id &&\n                        link.get('target').port === mt.getAttribute('port')); \n            });\n\n            return !portUsed;\n\n        } else { // e === 'source'\n\n            // source requires an output port to connect\n            return ms && ms.getAttribute('class') && ms.getAttribute('class').indexOf('output') >= 0; \n        }\n    }\n});\n\n// zoom the viewport by 50%\npaper.scale(1.5,1.5);\n\nfunction toggleLive(model, signal) {\n    // add 'live' class to the element if there is a positive signal\n    V(paper.findViewByModel(model).el).toggleClass('live', signal > 0);\n}\n\nfunction broadcastSignal(gate, signal) {\n    // broadcast signal to all output ports\n    _.defer(_.invoke, graph.getConnectedLinks(gate, { outbound: true }), 'set', 'signal', signal);\n}\n\nfunction initializeSignal() {\n\n    var signal = Math.random();\n    // > 0 wire with a positive signal is alive\n    // < 0 wire with a negative signal means, there is no signal \n    // 0 none of the above - reset value\n\n    // cancel all signals stores in wires\n    _.invoke(graph.getLinks(), 'set', 'signal', 0);\n\n    // remove all 'live' classes\n    $('.live').each(function() { V(this).removeClass('live') });\n\n    _.each(graph.getElements(), function(element) {\n        // broadcast a new signal from every input in the graph\n        (element instanceof joint.shapes.logic.Input) && broadcastSignal(element, signal);\n    });\n\n    return signal;\n}\n\n// Every logic gate needs to know how to handle a situation, when a signal comes to their ports.\njoint.shapes.logic.Gate.prototype.onSignal = function(signal, handler) { handler.call(this, signal) }\n// The repeater delays a signal handling by 400ms\njoint.shapes.logic.Repeater.prototype.onSignal = function(signal, handler) { _.delay(handler, 400, signal) }\n// Output element just marks itself as alive.\njoint.shapes.logic.Output.prototype.onSignal = function(signal) { toggleLive(this, signal); }\n\nvar currx = 10;\nvar curry = 10;\nvar andy = 10;\nvar input = 1;\nvar inputor = 1\nvar gates = {};\nvar wires = [];\nvar arr = Mccluskyfrontend.PrimeDominate.toJSON();\ngates['or'] = new joint.shapes.logic.Or({ position: {x:500,y:300}})\ngates['output'] = new joint.shapes.logic.Output({position: {x:600,y:300}})\nwires.push({source: {id: gates['or']['id'], port: 'out'}, target: {id: gates['output']['id'], port: 'in'}})\nfor (var i = 0; i<arr.length; i++) {\n	gates['and_' + i.toString()] = new joint.shapes.logic.And({ position: {x:(currx+200),y:(andy)}})\n	wires.push({source: {id: gates['and_' + i.toString()]['id'], port: 'out'}, target: {id: gates['or']['id'], port: 'in' + inputor.toString()}})\n	for (var j = 0; j<arr[i]['term'].length; j++) {\n		if (arr[i]['term'][j] === '1') {\n			gates['input_' + i.toString() + '_' + j.toString()] = new joint.shapes.logic.Input({position: {x:currx,y:curry}, attrs: {text: {text: String.fromCharCode(65+j)}}});\n			wires.push({source: {id: gates['input_' + i.toString() + '_' + j.toString()]['id'], port: 'out'}, target: {id: gates['and_' + i.toString()]['id'], port: 'in' + input.toString()}});\n			input += 1\n		} else if (arr[i]['term'][j] === '0') {\n			gates['input_' + i.toString() + '_' + j.toString()] = new joint.shapes.logic.Input({position: {x:currx,y:curry}, attrs: {text:{text: String.fromCharCode(65+j)}}});\n			gates['not_' + i.toString() + '_' + j.toString()] = new joint.shapes.logic.Not({position: {x:currx+100,y:curry}});\n			wires.push({'source': {'id': gates['input_' + i.toString() + '_' + j.toString()]['id'], 'port': 'out'}, 'target': {id: gates['not_' + i.toString() + '_' + j.toString()]['id'], port: 'in'}});\n			wires.push({source: {id: gates['not_' + i.toString() + '_' + j.toString()]['id'], port: 'out'}, target: {id: gates['and_' + i.toString()]['id'], port: 'in' + input.toString()}});\n			input += 1\n		}\n		curry += 50\n	}\n	input = 1\n	inputor += 1\n	andy += 50\n}\nconsole.log(wires)\n\n// var gates = {\n//     repeater: new joint.shapes.logic.Repeater({ position: { x: 350, y: 50 }}),\n//     or: new joint.shapes.logic.Or({ position: { x: 550, y: 50 }}),\n//     and: new joint.shapes.logic.And({ position: { x: 550, y: 150 }}),\n//     not: new joint.shapes.logic.Not({ position: { x: 120, y: 200 }}),\n//     nand: new joint.shapes.logic.Nand({ position: { x: 550, y: 250 }}),\n//     nor: new joint.shapes.logic.Nor({ position: { x: 250, y: 130 }}),\n//     xor: new joint.shapes.logic.Xor({ position: { x: 550, y: 200 }}),\n//     xnor: new joint.shapes.logic.Xnor({ position: { x: 550, y: 100 }}),\n//     input: new joint.shapes.logic.Input({ position: { x: 10, y: 100 }}),\n//     output: new joint.shapes.logic.Output({ position: { x: 400, y: 300 }})\n// }\n\n// var wires = [\n//     { source: { id: gates.input.id, port: 'out' }, target: { id: gates.not.id, port: 'in' }},\n//     { source: { id: gates.not.id, port: 'out' }, target: { id: gates.nor.id, port: 'in1' }},\n//     { source: { id: gates.nor.id, port: 'out' }, target: { id: gates.repeater.id, port: 'in' }},\n//     { source: { id: gates.nor.id, port: 'out' }, target: { id: gates.output.id, port: 'in' }},\n//     { source: { id: gates.repeater.id, port: 'out' }, target: { id: gates.nor.id, port: 'in2'},\n//       vertices: [{ x: 300, y: 220 }]\n//     }\n// ];\n\n// add gates and wires to the graph\ngraph.addCells(_.toArray(gates));\n_.each(wires, function(attributes) { graph.addCell(new joint.shapes.logic.Wire(attributes)) });\n\ngraph.on('change:source change:target', function(model, end) {\n\n    var e = 'target' in model.changed ? 'target' : 'source';\n\n    if ((model.previous(e).id && !model.get(e).id) || (!model.previous(e).id && model.get(e).id)) {\n        // if source/target has been connected to a port or disconnected from a port reinitialize signals\n        current = initializeSignal();\n    }\n});\n\ngraph.on('change:signal', function(wire, signal) {\n\n    toggleLive(wire, signal);\n\n    var magnitude = Math.abs(signal);\n\n    // if a new signal has been generated stop transmitting the old one\n    if (magnitude !== current) return;\n\n    var gate = graph.getCell(wire.get('target').id);\n\n    if (gate) {\n\n        gate.onSignal(signal, function() {\n\n            // get an array of signals on all input ports\n            var inputs = _.chain(graph.getConnectedLinks(gate, { inbound: true }))\n                .groupBy(function(wire) { return wire.get('target').port })\n                .map(function(wires) { return Math.max.apply(this, _.invoke(wires, 'get', 'signal')) > 0 })\n                .value();\n\n            // calculate the output signal\n            var output = magnitude * (gate.operation.apply(gate, inputs) ? 1 : -1);\n            \n            broadcastSignal(gate, output);\n        });\n   }\n});\n\n// initialize signal and keep its value\nvar current = initializeSignal();\n}\n</script>";return __p},this.JST["app/scripts/templates/dominating.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape,Array.prototype.join}with(obj)__p+='<div class="jumbotron">\n	<h2>The Following are the Final Implicants</h2>\n	<table class="table">\n	',_.each(collection,function(a){__p+="\n	<tr>\n		<td>"+(null==(__t=a.term)?"":__t)+"</td>\n	</tr>\n	"}),__p+='\n	</table>\n	<p><a class="btn btn-lg btn-success dominating-next">Next</a></p>\n</div>';return __p},this.JST["app/scripts/templates/error.ejs"]=function(obj){obj||(obj={});{var __p="";_.escape}with(obj)__p+='<div class="jumbotron">\n	<h1>Error</h1>\n	Something is not right\n</div>';return __p},this.JST["app/scripts/templates/essential.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape,Array.prototype.join}with(obj)__p+='<div class="jumbotron">\n	<h2>The Following are the Essential Prime Implicants</h2>\n	<table class="table">\n	',_.each(collection,function(a){__p+="\n	<tr>\n		<td>"+(null==(__t=a.term)?"":__t)+"</td>\n		<td>"+(null==(__t=a.origin)?"":__t)+"</td>\n	</tr>\n	"}),__p+='\n	</table>\n	<p><a class="btn btn-lg btn-success essential-next">Next</a></p>\n</div>';return __p},this.JST["app/scripts/templates/final.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape,Array.prototype.join}with(obj){__p+="<div class=\"jumbotron\">\n	<h2>Final Equation is</h2>\n	<div id='final-eq'>\n	$$\n	";for(var j=0;j<collection.length;j++){if(__p+="\n		","1"==collection[j].term){__p+="\n			1\n			";break}__p+="\n			";for(var i=0;i<collection[j].term.length;i++)__p+="\n				","1"==collection[j].term[i]?__p+=" "+(null==(__t=String.fromCharCode(i+65))?"":__t)+" ":"0"==collection[j].term[i]&&(__p+=" \n				\\overline{"+(null==(__t=String.fromCharCode(i+65))?"":__t)+" }"),__p+="\n			";__p+="\n			",j!=collection.length-1&&(__p+="+"),__p+="\n		"}__p+='\n	$$\n	</div>\n	<p><a class="btn btn-lg btn-success final-next">Next</a></p>\n</div>\n<script>\n	var math = document.getElementById("final-eq");\n	MathJax.Hub.Queue(["Typeset",MathJax.Hub,math]);\n</script>'}return __p},this.JST["app/scripts/templates/prime.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape,Array.prototype.join}with(obj)__p+='<div class="jumbotron">\n	<h2>The Following are the generated Prime Implcants</h2>\n	<table class="table">\n	',_.each(collection,function(a){__p+="\n	<tr>\n		<td>"+(null==(__t=a.implicant)?"":__t)+"</td>\n		<td>\n			",_.each(a.origin,function(a){__p+="\n				"+(null==(__t=a)?"":__t)+",\n			"}),__p+="\n		</td>\n	</tr>\n	"}),__p+='\n	</table>\n	<p><a class="btn btn-lg btn-success prime-next">Next</a></p>\n</div>';return __p},this.JST["app/scripts/templates/start.ejs"]=function(obj){obj||(obj={});{var __p="";_.escape}with(obj)__p+='<div class="jumbotron">\n	<h1>The McCluskinator</h1>\n	<p class="lead">Get ready to be McCluskinated</p>\n	<p><a class="btn btn-lg btn-success" href="#/terms">Start</a></p>\n</div>';return __p},this.JST["app/scripts/templates/terms.ejs"]=function(obj){obj||(obj={});{var __p="";_.escape}with(obj)__p+='<div class="jumbotron">\n	<h2>Enter MIN/MAX Terms and don\'t cares</h2>\n	<div class="min-max-container">\n		<div class="radio">\n		  <label>\n		    <input type="radio" name="optionsRadios" id="optionsRadios1" value="true" checked="">\n		    Min Terms\n		  </label>\n		</div>\n		<div class="radio">\n		  <label>\n		    <input type="radio" name="optionsRadios" id="optionsRadios2" value="false">\n			Max Terms\n		  </label>\n		</div>\n	</div>\n	<br />\n	<div class="terms-block">\n		<li id="eq1">$$\\sum{m(}$$</li><li><input name="tags" id="terms" /></li><li id="eq2">$$) + d($$</li><li><input name="tags" id="cares" /></li><li id="eq3">$$)$$</li>\n	</div>\n	<input type="number" class="form-control number-of-bits"placeholder="Enter Number of bits">\n	<p><a class="btn btn-lg btn-success terms-next">Next</a></p>\n	<p><a class="btn btn-lg btn-success skip-next">Skip TruthTable</a></p>\n</div>\n<script>\n	var math = document.getElementById("eq1");\n	MathJax.Hub.Queue(["Typeset",MathJax.Hub,math]);\n	var math = document.getElementById("eq2");\n	MathJax.Hub.Queue(["Typeset",MathJax.Hub,math]);\n	var math = document.getElementById("eq3");\n	MathJax.Hub.Queue(["Typeset",MathJax.Hub,math]);\n</script>\n';return __p},this.JST["app/scripts/templates/truth.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape,Array.prototype.join}with(obj)__p+='<div class="jumbotron">\n	<h2>The Following is the generated truth table</h2>\n	<table class="table">\n	',_.each(collection,function(a){__p+="\n	<tr>\n		<td>"+(null==(__t=a.term)?"":__t)+"</td>\n		<td>"+(null==(__t=null==a.value?"X":1==a.value?1:0)?"":__t)+"</td>\n	</tr>\n	"}),__p+='\n	</table>\n	<p><a class="btn btn-lg btn-success truth-next">Next</a></p>\n</div>';return __p},function(){window.Mccluskyfrontend={Models:{},Collections:{},Views:{},Routers:{},Data:{},PrimeImplicants:{},PrimeEssential:{},PrimeDominate:{},Answer:{},init:function(){"use strict";return console.log("Hello from Backbone!"),Backbone.history.start()}},$(function(){"use strict";return Mccluskyfrontend.init()})}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Models.Truthrow=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.url="",c.prototype.initialize=function(){},c.prototype.defaults={},c.prototype.validate=function(){},c.prototype.parse=function(a){return a},c}(Backbone.Model)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Models.Prime=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.url="",c.prototype.initialize=function(){},c.prototype.defaults={},c.prototype.validate=function(){},c.prototype.parse=function(a){return a},c}(Backbone.Model)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Models.Essential=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.url="",c.prototype.initialize=function(){},c.prototype.defaults={},c.prototype.validate=function(){},c.prototype.parse=function(a){return a},c}(Backbone.Model)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Models.Dominating=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.url="",c.prototype.initialize=function(){},c.prototype.defaults={},c.prototype.validate=function(){},c.prototype.parse=function(a){return a},c}(Backbone.Model)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Collections.Dominating=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.model=Mccluskyfrontend.Models.Dominating,c}(Backbone.Collection)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Collections.Essential=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.model=Mccluskyfrontend.Models.Essential,c}(Backbone.Collection)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Collections.Primes=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.model=Mccluskyfrontend.Models.Prime,c}(Backbone.Collection)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Collections.Truthtable=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.model=Mccluskyfrontend.Models.Truthrow,c}(Backbone.Collection)}.call(this),function(){"use strict";Mccluskyfrontend.Views.Start=Backbone.View.extend({template:JST["app/scripts/templates/start.ejs"],tagName:"div",id:"",className:"",events:{},render:function(){return this.$el.html(this.template()),this}})}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Terms=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/terms.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={"click a.terms-next":"postTerms","click a.skip-next":"postSkip"},c.prototype.getPrime=function(){return $.ajax({url:"http://mcclusky.herokuapp.com/prime",type:"GET",success:function(a){var b,c,d,e,f;for(d=a.data,c=[],e=0,f=d.length;f>e;e++)b=d[e],c.push(new Mccluskyfrontend.Models.Prime({implicant:b[0],origin:b.slice(1,b.length)}));return console.log(c),window.Mccluskyfrontend.PrimeImplicants=new Mccluskyfrontend.Collections.Primes(c),Backbone.history.navigate("prime",{trigger:!0})}})},c.prototype.postTerms=function(){var a,b,c,d;return b=$(".min-max-container input:checked").val(),d=$("#terms_tagsinput .tag span").text().split("  "),d.splice(d.length-1,1),a=$("#cares_tagsinput .tag span").text().split("  "),a.splice(a.length-1,1),c=$(".number-of-bits").val(),$.ajax({url:"http://mcclusky.herokuapp.com/terms",type:"POST",data:{terms:d,cares:a,type:b,numberOfBits:c},success:function(a){var b,c,d,e,f;if(window.Mccluskyfrontend.Token=a.token,a.table.err)return Backbone.history.navigate("error",{trigger:!0});delete a.table.err,b=[],f=a.table;for(c in f)d=f[c],e=parseInt(c).toString(2),b.push(new Mccluskyfrontend.Models.Truthrow({term:("0000000000000000"+e).slice(-1*parseInt(a["number-of-bits"])),value:d})),window.Mccluskyfrontend.Data=new Mccluskyfrontend.Collections.Truthtable(b);return Backbone.history.navigate("truth",{trigger:!0})}})},c.prototype.postSkip=function(){var a,b,c,d;return b=$(".min-max-container input:checked").val(),d=$("#terms_tagsinput .tag span").text().split("  "),d.splice(d.length-1,1),a=$("#cares_tagsinput .tag span").text().split("  "),a.splice(a.length-1,1),c=$(".number-of-bits").val(),$.ajax({url:"http://mcclusky.herokuapp.com/terms",type:"POST",data:{terms:d,cares:a,type:b,numberOfBits:c},success:function(a){return a.table.err?Backbone.history.navigate("error",{trigger:!0}):(window.Mccluskyfrontend.Token=a.token,$.ajax({url:"http://mcclusky.herokuapp.com/prime",type:"POST",data:{token:Mccluskyfrontend.Token},success:function(a){var b,c,d,e,f;for(d=a.data,c=[],e=0,f=d.length;f>e;e++)b=d[e],c.push(new Mccluskyfrontend.Models.Prime({implicant:b[0],origin:b.slice(1,b.length)}));return console.log(c),window.Mccluskyfrontend.PrimeImplicants=new Mccluskyfrontend.Collections.Primes(c),Backbone.history.navigate("prime",{trigger:!0})}}))}})},c.prototype.render=function(){return this.$el.html(this.template()),$("#terms").tagsInput(),$("#cares").tagsInput(),this},c}(Backbone.View)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Truth=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/truth.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={"click a.truth-next":"getPrime"},c.prototype.getPrime=function(){return $.ajax({url:"http://mcclusky.herokuapp.com/prime",type:"POST",data:{token:Mccluskyfrontend.Token},success:function(a){var b,c,d,e,f;for(d=a.data,c=[],e=0,f=d.length;f>e;e++)b=d[e],c.push(new Mccluskyfrontend.Models.Prime({implicant:b[0],origin:b.slice(1,b.length)}));return console.log(c),window.Mccluskyfrontend.PrimeImplicants=new Mccluskyfrontend.Collections.Primes(c),Backbone.history.navigate("prime",{trigger:!0})}})},c.prototype.render=function(){var a;return a=this.collection,this.$el.html(this.template({collection:a})),this},c}(Backbone.View)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Prime=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/prime.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={"click a.prime-next":"getEssential"},c.prototype.getEssential=function(){return $.ajax({url:"http://mcclusky.herokuapp.com/essential",type:"POST",data:{token:Mccluskyfrontend.Token},success:function(a){var b,c,d,e,f;for(c=[],f=a.data,d=0,e=f.length;e>d;d++)b=f[d],c.push(new Mccluskyfrontend.Models.Essential({term:b[0],origin:b[1]}));return window.Mccluskyfrontend.PrimeEssential=new Mccluskyfrontend.Collections.Essential(c),Backbone.history.navigate("essential",{trigger:!0})}})},c.prototype.render=function(){var a;return a=this.collection,this.$el.html(this.template({collection:a})),this},c}(Backbone.View)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Essential=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/essential.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={"click a.essential-next":"getDominating"},c.prototype.getDominating=function(){return $.ajax({url:"http://mcclusky.herokuapp.com/dominating",type:"POST",data:{token:Mccluskyfrontend.Token},success:function(a){var b,c,d,e,f;for(b=a.data,d=[],e=0,f=b.length;f>e;e++)c=b[e],d.push(new Mccluskyfrontend.Models.Dominating({term:c}));return Mccluskyfrontend.PrimeDominate=new Mccluskyfrontend.Collections.Dominating(d),Backbone.history.navigate("dominating",{trigger:!0})}})},c.prototype.render=function(){var a;return a=this.collection,this.$el.html(this.template({collection:a})),this},c}(Backbone.View)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Dominating=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/dominating.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={"click a.dominating-next":"getFinal"},c.prototype.getFinal=function(){return Backbone.history.navigate("final",{trigger:!0})},c.prototype.render=function(){var a;return a=this.collection,this.$el.html(this.template({collection:a})),this},c}(Backbone.View)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Final=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/final.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={"click a.final-next":"getCircuit"},c.prototype.getCircuit=function(){return Backbone.history.navigate("circuit",{trigger:!0})},c.prototype.render=function(){var a;return a=this.collection,this.$el.html(this.template({collection:a})),this},c}(Backbone.View)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Circuit=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/circuit.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={},c.prototype.render=function(){var a;return a=this.collection,this.$el.html(this.template({collection:a})),this},c}(Backbone.View)}.call(this),function(){"use strict";var a={}.hasOwnProperty,b=function(b,c){function d(){this.constructor=b}for(var e in c)a.call(c,e)&&(b[e]=c[e]);return d.prototype=c.prototype,b.prototype=new d,b.__super__=c.prototype,b};Mccluskyfrontend.Views.Error=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.template=JST["app/scripts/templates/error.ejs"],c.prototype.tagName="div",c.prototype.id="",c.prototype.className="",c.prototype.events={},c.prototype.render=function(){return this.$el.html(this.template())},c}(Backbone.View)}.call(this),function(){"use strict";var a;Mccluskyfrontend.Routers.Main=Backbone.Router.extend({routes:{"":"start",start:"start",terms:"terms",truth:"truth",prime:"prime",essential:"essential",dominating:"dominating","final":"final",circuit:"circuit",error:"error"}}),a=new Mccluskyfrontend.Routers.Main,a.on("route:start",function(){var a;return a=new Mccluskyfrontend.Views.Start,a.setElement(".backbone-container"),a.render()}),a.on("route:terms",function(){var a;return a=new Mccluskyfrontend.Views.Terms,a.setElement(".backbone-container"),a.render()}),a.on("route:truth",function(){var a;return a=new Mccluskyfrontend.Views.Truth({collection:Mccluskyfrontend.Data.toJSON()}),a.setElement(".backbone-container"),a.render()}),a.on("route:prime",function(){var a;return a=new Mccluskyfrontend.Views.Prime({collection:Mccluskyfrontend.PrimeImplicants.toJSON()}),a.setElement(".backbone-container"),a.render()}),a.on("route:essential",function(){var a;return a=new Mccluskyfrontend.Views.Essential({collection:Mccluskyfrontend.PrimeEssential.toJSON()}),a.setElement(".backbone-container"),a.render()}),a.on("route:dominating",function(){var a;return a=new Mccluskyfrontend.Views.Dominating({collection:Mccluskyfrontend.PrimeDominate.toJSON()}),a.setElement(".backbone-container"),a.render()}),a.on("route:final",function(){var a;return a=new Mccluskyfrontend.Views.Final({collection:Mccluskyfrontend.PrimeDominate.toJSON()}),a.setElement(".backbone-container"),a.render()}),a.on("route:circuit",function(){var a;return a=new Mccluskyfrontend.Views.Circuit({collection:Mccluskyfrontend.PrimeDominate.toJSON()}),a.setElement(".backbone-container"),a.render()}),a.on("route:error",function(){var a;return a=new Mccluskyfrontend.Views.Error,a.setElement(".backbone-container"),a.render()})}.call(this);